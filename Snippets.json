{
	//======================get request====================
	"Get request Snippets": {
		"scope": "javascript,typescript",
		"prefix": "get",
		"body": [
			"app.get('/$1',(req,res)=>{",
			"   res.render('$2')",
			"})",
			" ",
			" ",
		],
		"description": "Simple Get request Snippets"
	},

	//======================Post request====================
	"Post request Snippets": {
		"scope": "javascript,typescript",
		"prefix": "post",
		"body": [
			"app.post('/$1',urlencodedParser,(req,res)=>{",
			"    console.log(req.body)",
			"    res.send('found')",
			"})",
			" ",
			" ",
		],
		"description": "Simple Post request Snippets"
	},

	//======================Fetch====================
	"Fetch API Snippets": {
		"scope": "javascript,typescript",
		"prefix": "fetch",
		"body": [
			
			"//====================get data===================",
			"//const files = document.querySelector('input[type=`file`]').files;",
			"let test_data = 'Numan';",
			" ",
			"//==============Set into formData================",
			"const form = new FormData()",
			"form.append('test_data', test_data)",
			"//data.append('picture', files[0]);",
			" ",
			" ",
			"//==============Finally send the data===========",
			"let url = '/$1'",
			"fetch(url, {",
			"   method: 'post',",
			"   body: form,",
			"})",
			"   .then(response => { return response.json() })",
			"   .then(data => { console.log(data) })",
			"   .catch(err => { console.error(err) })",
			" ",
			" ",
			
		],
		"description": "Fetch API"
	},

	//======================MongooseServer====================
	"mongooseServer API Snippets": {
		"scope": "javascript,typescript",
		"prefix": "mongooseServerConnect",
		"body": [
			"//NOTE:Create .env file and put here mongoose server url ",
			"//Like that:: DATABASE=mongodb+srv://kay:RealPassword@cluster0.rrlbs.mongodb.net/databaseFolder",
			"//========================================================================================",
			"//                                database",
			"//========================================================================================",
			"mongoose",
			".connect(process.env.DATABASE, {",
			"   useNewUrlParser: true,",
			"   useUnifiedTopology: true",
			"})",
			"var db = mongoose.connection;",
			"db.on('error', console.error.bind(console, 'MongoDB connection error:'));",
			"db.once('open', function () {",
			"console.log('MongoDB database connection successfully');",
			"});",
			" ", 
			" ", 
			" ", 
			"//========================================================================================",
			"//                                 Data base schema",
			"//========================================================================================",
			"let schema = new mongoose.Schema(",
			"{",
			"   name: String,",
			"   phone: String,",
			"   gmail: String,",
			"   img: String,",
			"}",
			");",
			" ", 
			" ", 
			"//========================================================================================",
			"//                                    Data Model",
			"//========================================================================================",
			"let model = mongoose.model('database_folder_name', schema);",
			" ",
			" ",
		],
		"description": "mongooseServerConnect"
	},
	//======================Mongoose Manual====================
	"mongooseManual API Snippets": {
		"scope": "javascript,typescript",
		"prefix": "mongooseManualConnect",
		"body": [
			"//Use this if you don't have any cloud Database ",
			"//NOTE:: Install mongobd on your pc or server and create a folder in c drive 'data/db'",
			"//========================================================================================",
            "//                                database",
			"//========================================================================================",
			"mongoose.connect('mongodb://localhost/folder1',{useNewUrlParser: true, useUnifiedTopology: true})",
			"var db = mongoose.connection;",
			"db.on('error', console.error.bind(console, 'MongoDB connection error:'));",
			"db.once('open', function() {",
			"console.log('MongoDB database connection successfully');",
			"});",
			" ",
			" ",
			" ",
			"//========================================================================================",
			"//                                 Data base schema",
			"//========================================================================================",
			"let schema = new mongoose.Schema(",
			"{",
			"   name: String,",
			"   phone: String,",
			"   gmail: String,",
			"   img: String,",
			"}",
			");",
			" ",
			" ",
			"//========================================================================================",
			"//                                    Data Model",
			"//========================================================================================",
			"let model = mongoose.model('database_folder_name', schema);",
			" ",
			" ",
		],
		"description": "mongooseManualConnect"
	},

	//======================Multer====================
	"Multer Snippets Storage and Filter": {
		"scope": "javascript,typescript",
		"prefix": "Multer",
		"body": [
			"//========================================================================================",
			"//                                Multer",
			"//========================================================================================",
			"let time;      //need this variable ",
			"let storage = multer.diskStorage({",
			"    destination: function (req, file, cb) {",
			"        cb(null, 'images/uploads/')",
			"    },",
			"    filename: function (req, file, cb) {",
			"        time = Date.now();",
			"        cb(null, file.fieldname + '-' + time + '.png')",
			"    }",
			"})",
			"const fileFilter = (req, file, cb) => {",
			"    if ((file.mimetype).includes('jpeg') || (file.mimetype).includes('png') || (file.mimetype).includes('jpg')) {",
			"        cb(null, true);",
			"    } else {",
			"        cb(null, false);",
			"    }",
			"};",
			"let upload = multer({ storage: storage, fileFilter: fileFilter }).single('myimg')",
			"upload(req, res, function (err) {",
			" ",
			"})",
			" ",
			" ",
		],
		"description": "Multer mainly use for file saving."
	},
	//======================Domparser====================
	"Domparser Snippets": {
		"scope": "javascript,typescript",
		"prefix": "Domparser",
		"body": [
			"let parser = new DOMParser();",
			"let doc = parser.parseFromString(${1:Plain-HTML}, 'text/html');//gave here string html file",
			"document.body.appendChild(doc.getElementById('${2:container_div_ID}'));//Append HTML file to the browser",
         	"$('head').append(doc.getElementsByTagName('script'));//Append new js file to the browser",
            "//  note:: if you want to use this then add a cdn jquery file 1.8.3 to the html",
            "// script:: src='https://cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js' integrity='sha512-J9QfbPuFlqGD2CYVCa6zn8/7PEgZnGpM5qtFOBZgwujjDnG5w5Fjx46YzqvIh/ORstcj7luStvvIHkisQi5SKw==' crossorigin='anonymous' referrerpolicy='no-referrer'",
			" ",
			" ",
		],
		"description": "Domparser"
	},
	//======================Domparser with settimeout====================
	"Domparser settimeout Snippets": {
		"scope": "javascript,typescript",
		"prefix": "Domparser settimeout",
		"body": [
			"setTimeout(() => {",
			"    let script2 = document.createElement('script')",
			"    script2.src = 'https://cdnjs.cloudflare.com/ajax/libs/jquery/1.8.3/jquery.min.js'",
			"    $('head')[0].append(script2)",
			"    script2.addEventListener('load', () => {} )",
			" }, 0);",
			"",
			" setTimeout(() => {",
			"    let parser = new DOMParser();",
			"    let doc = parser.parseFromString(${1:Plain-HTML}, 'text/html');//gave here string html file",
			"    document.body.appendChild(doc.getElementById('${2:container_div_ID}'));//Append HTML file to the browser",
			"    $('head').append(doc.getElementsByTagName('script'));//Append new js file to the browser",
			" }, 100);",
			" ",
			" ",
		],
		"description": "This functions automatically load the require jQuery file from the web and then load your js from the parser"
	},

	//======================Domparser Manual====================
	"Domparser Manual Snippets": {
		"scope": "javascript,typescript",
		"prefix": "Domparser Manual",
		"body": [
			"//Domparser to convert text html to dcument html",
			"let parser = new DOMParser();",
			"let doc = parser.parseFromString(${1:Plain-HTML}, 'text/html');",
   			"",
			"//Add new thing from the requested html to web page",
			"document.body.appendChild(doc.getElementById('${2:container_div_ID}'));",
			"",
			"//manually add script",
			"var tmpScripts = doc.getElementsByTagName('script');",
			"    for (var i = 0; i < tmpScripts.length; i++) {",
			"        if(doc.getElementsByTagName('script')[i]){",
  			"",
			"        if (doc.getElementsByTagName('script')[i].src) {//Manually Append new js file with src",
			"            let script2 = document.createElement('script') ",
			"            script2.src = doc.getElementsByTagName('script')[i].src",	 
			"            $('head')[0].append(script2)",			
   
			"        } else {",
			"           let script = document.createElement('script')//Manually Append new js file without src",
			"           script.type = 'text/javascript'",
			"           script.textContent = doc.getElementsByTagName('script')[i].innerHTML",
			"           $('head')[0].append(script)",
			"           }",
			"       }",
			"   }",
   
			" ",
			" ",
		],
		"description": "Manually added javaScript from the parser"
	},


	//======================Bcrypt====================
	"Bcrypt Snippets ": {
		"scope": "javascript,typescript",
		"prefix": "Bcrypt",
		"body": [
			" ",
			"const bcrypt = require('bcrypt');",
            "const saltRounds = 10;",
			" ",
            "bcrypt.hash('${1:password}', saltRounds, function (err, encode_password) {",
			"    console.log(encode_password)//store your password in db",
            "});",
            "",
            "",
			"//this part compare between your string password and your encoded password",
            "bcrypt.compare('${2:password}', ${3:encode_password}, function (err, result) {",
            "    if (err) console.log('Get err')",
            "    else {",
            "        if (result == true) {",
            "            console.log('match')",
            "        } else console.log('wrong')",
            "    }",
            "});",
			" ",
			" ",
		],
		"description": "Password encode with Bcrypt"
	},

	//======================cluster====================
	"Cluster Snippets": {
		"scope": "javascript,typescript",
		"prefix": "cluster",
		"body": [
			"//========================================================================================",
                  "//                                Server start with cluster",
                  "//========================================================================================",
			" ",
			"if (cluster.isMaster) {",
			"    console.log(`Master ${process.pid} is running`);",
			"",
			"    // Fork workers.",
			"    for (let i = 0; i < numCPUs; i++) {",
			"        cluster.fork();",
			"    }",
			"",
			"    cluster.on('exit', (worker, code, signal) => {",
			"        console.log(`worker ${worker.process.pid} died`);",
			"        cluster.fork();",
			"   });",
			"} else {",
			"    app.listen(process.env.PORT || 80, () => {",
			"        console.log(`Running ` + process.pid);",
			"   })",
			"}",
			" ",
			" ",
		],
		"description": "Cluster module allows you to easily create child processes that each runs on their own single thread, to handle the load."
	},
	//======================JWT====================
	"JWT Snippets": {
		"scope": "javascript,typescript",
		"prefix": "JWT",
		"body": [
			" ",
			"let jwt = require('jsonwebtoken')",
			"let User_data = {",
			"   name:'numan',",
			"   pass:'$2b$10$mWGsHZdpxm1GuBqjCNkDauYP24LV5kqCYHHUfWgMlxjoSKWeVqkoe'",
			"}",
			"",
			"",
			"let creat_token = () => {",
			"    //vreify token",
			"    let token = jwt.sign(User_data, process.env.jwt_key, { expiresIn: '2 minute' });",
			"    console.log(token)",
			"",
			"    //vreify token",
			"    let verify_token = jwt.verify(token, process.env.jwt_key)",
			"    console.log(verify_token)",
			"}",
			"creat_token()",
			" ",
			" ",
		],
		"description": "JWT is used for stateless authentication mechanisms for users and providers, this means maintaining session is on the client-side instead of storing sessions on the server"
	},
	//======================Http====================
	"http Snippet": {
		"scope": "javascript,typescript",
		"prefix": "http",
		"body": [
			" ",
			"const requestListener = function (req, res) {",
			"    console.log(req.url)",
			"    switch (req.url) {",
			"        case '/':",
			"            let html = fs.readFileSync(__dirname+'/${1:html file path}')",
			"            res.end(html)",
			"            break",
			"        case '/${2:address}':",
			"            $3",
			"            res.end('')",
			"            break",
			"        default :",
			"            res.writeHead(200);",
			"            res.end('404 file not found');",
			"            break",
			"    }",
			"};",
			"",
			"var server = http.createServer(requestListener);",
			"server.listen(8000, () => {",
			"    console.log('surver started')",
			"});",
			" ",
			" ",
		],
		"description": "Http module to creat server"
	},
}



